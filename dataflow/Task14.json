{
	"name": "Task14",
	"properties": {
		"folder": {
			"name": "Kristijan Celkoski"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "output_task_14",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "input2_task_14",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Error_Salaries",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "Success_File",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "split2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Salary as string,",
				"          DateOfEmployment as string,",
				"          Title as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> source1",
				"source(output(",
				"          original as (ID as string, DateOfEmployment as string, Name as string, Position as string),",
				"          Salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source2",
				"source1 split(!isNull(toInteger(Salary)),",
				"     disjoint: false) ~> split1@(salary, noSalary)",
				"split1@salary split(toInteger(Salary) > 1500,",
				"     toInteger(Salary) < 1500,",
				"     disjoint: true) ~> split2@(greaterThan1500, lessThan1500, all)",
				"split1@noSalary sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"split2@all sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}