{
	"name": "Task01GenerateCSVReport",
	"properties": {
		"folder": {
			"name": "Gjorge Argirov"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSVCommaDelimiter",
						"type": "DatasetReference"
					},
					"name": "testdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CSVCommaDelimiter",
						"type": "DatasetReference"
					},
					"name": "CABirthdays",
					"description": "Expo"
				},
				{
					"dataset": {
						"referenceName": "CSVCommaDelimiter",
						"type": "DatasetReference"
					},
					"name": "CABirthdaysBonus2"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     fileName as string (\"Bonus2.csv\")",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> testdata",
				"testdata filter(and(toString(byName(\"STATECODE\")) == \"CA\", or(or(startsWith(toString(byName(\"BIRTHDAY\")), \"1964\"), startsWith(toString(byName(\"BIRTHDAY\")), \"1963\")), startsWith(toString(byName(\"BIRTHDAY\")), \"1965\")))) ~> filter1",
				"filter1 select(mapColumn(",
				"          each(match(name==\"SURNAME\"),",
				"               \"SURNAME\" = $$),",
				"          each(match(name==\"GIVENNAME\"),",
				"               \"GIVENNAME\" = $$),",
				"          each(match(name==\"BIRTHDAY\"),",
				"               \"BIRTHDAY\" = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sort(desc(toString(byName(\"SURNAME\")), true)) ~> sort1",
				"testdata derive(Domain = concat(\"@\", split(byName(\"EMAILADDRESS\"), \"@\")[2])) ~> derivedColumn1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[($fileName)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> CABirthdays",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CABirthdaysBonus2"
			]
		}
	}
}